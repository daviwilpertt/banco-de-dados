ALTER TABLE nome_coluna
	-DROP FOREIGN KEY // apaga a chave estrangeira
	-ADD COLUMN // adciona coluna
	-MODIFY COLUMN // muda o tipo de dado de uma coluna
	-DROP COLUMN // apaga coluna
	-RENAME COLUMN nome_coluna TO coluna // renomear coluna
	-RENAME TO nome_tabela // muda o nome da tabela

so pode apagar tabela que não mandou nenhuma informação para outra tabela

INSERT INTO nome_tabela (coluna) VALUES ('valor')
DELETE FROM nome_tabela WHERE chave_primaria = 1;
UPDATE nome_tabela SET atributo WHERE chave_primaria = 1;

constraints // são regras para aplicar nas colunas, limitam os tipos de dados inseridos, sao alguns:
	NOT NULL: não pode estar vazio
	UNIQUE: não pode repete
	DEFAULT: se tiver vazio, ele assume o valor default
	ENUM: lista pré-definida
	CHECK: condição (idade >=18)
	PRIMARY KEY
	FOREIGN KEY
dados tipo DATE// em formato EUA | ano/mes/dia
consulta entre tabelas // SELECT * FROM nome_tabela JOIN outra_tabela ON nome_tabela.chave_estrangeira = outra_tabela.chave_primaria
criar uma view (atalho) // CREATE VIEW nome_atalho AS SELECT...

consulta com condicao // SELECT * formato tabela WHERE condicao
ordenar // ORDER BY coluna condicao (DESC | ASC)
puxar outro nome da coluna // SELECT nome AS nome_cliente FROM cliente
contagem de quantos registros na tabela // SELECT count(nome_coluna) FROM nome_tabela
somar 
valor maximo ou minimo de uma tabela // SELECT MAX ou MIN(nome_coluna) FROM tabela
nao repetir tabelas com msm nome // SELECT DISTINCT FROM

DELIMITER $$ // delimitador do trigger (para que o trigger funcione)
CREATE TRIGGER estoque_atualizado // nome do trigger
AFTER INSERT ON tabela // quando acontece 
FOR EACH ROW // para cada linha
BEGIN // comando condicional
UPDATE produto SET estoque = estoque - NEW.quantidade
WHERE id_produto = NEW.produto_id;
END $$ // finalizador do trigger 